import * as AWS from "aws-sdk";
import { Client as RpcClient } from "node-json-rpc2";
import { McmaException, AIJob } from "@mcma/core";
import { AwsS3FileLocator, AwsS3FileLocatorProperties, AwsS3FolderLocatorProperties } from "@mcma/aws-s3";
import { ProviderCollection, ProcessJobAssignmentHelper } from "@mcma/worker";

const S3 = new AWS.S3();

function promisifyRpcClientCall(client: RpcClient): (request_wd: any) => Promise<any> {
    return (request_wd: any) =>
        new Promise((resolve, reject) =>
            client.call(request_wd, (err: any, res: any) => {
                if (err) {
                    if (err === "error:" && !!res) {
                        err = res;
                    }
                    reject(err);
                } else {
                    resolve(res);
                }
            })
        );
}

export async function validateSpeechToText(providers: ProviderCollection, jobAssignmentHelper: ProcessJobAssignmentHelper<AIJob>) {
    const logger = jobAssignmentHelper.logger;

    const jobInput = jobAssignmentHelper.jobInput;
    const hypothesis = jobInput.get<AwsS3FileLocatorProperties>("inputFile");
    const outputLocation = jobInput.get<AwsS3FolderLocatorProperties>("outputLocation");

    logger.debug("outputLocation", outputLocation);

    logger.debug("#################################");
    logger.debug("validate-speech-to-text.js");
    logger.debug("#################################");

    logger.debug("31. STT benchmarking evaluating the quality of the speech to text service");

    logger.debug("31.1 get STT output file -> hypothesis from job creation parameters");
    // the content to be tested is called "hypothesis" in respect to the terminology used in STT benchmarking 
    const s3Bucket_hypothesis = hypothesis.awsS3Bucket;
    const s3Key_hypothesis = hypothesis.awsS3Key;
    let s3Object_hypothesis;
    try {
        s3Object_hypothesis = await S3.getObject({
            Bucket: s3Bucket_hypothesis,
            Key: s3Key_hypothesis,
        }).promise();
    } catch (error) {
        throw new McmaException("Unable to read file in bucket '" + s3Bucket_hypothesis + "' with key '" + s3Key_hypothesis + "' due to error: " + error.message);
    }

    logger.debug("31.2 extract hypothesis text to be evaluated");
    const hypothesisText = s3Object_hypothesis.Body.toString();
    logger.debug(hypothesisText);

    logger.debug("31.3 get reference file stored in tempBucket/temp provided from step 31 as input parameter in job call");
    const s3Key_reference = "temp/stt_output_clean.txt";
    let s3Object_reference;
    try {
        s3Object_reference = await S3.getObject({
            Bucket: s3Bucket_hypothesis,
            Key: s3Key_reference,
        }).promise();
    } catch (error) {
        throw new McmaException("Unable to read file in bucket '" + s3Bucket_hypothesis + "' with key '" + s3Key_reference + "' due to error: " + error.message);
    }

    logger.debug("31.4 extract reference text against which hypothesisText is to be compared");
    const referenceText = JSON.parse(s3Object_reference.Body.toString());
    logger.debug(referenceText.results.transcripts[0].transcript);

    logger.debug("31.4 initialse and call sttbenchmarking service from public url using node-json-rpc2 API");
    // The URL is generated by AWS ECS when initializing the service and task from the sttBenchmarking docker image");
    // Only worddiffs is used for visualisation of the results but other options are available such as the word error rate 
    let client = new RpcClient({
        protocol: "http",//Optional. Will be http by default
        host: "54.229.249.131",
        path: "/api",
        port: "8080",
        method: "POST"//Optional. POST by default
    });
    logger.debug("RpcClient", client);
    let params: any = {};
    params.ref = "\"" + referenceText.results.transcripts[0].transcript + "\"";
    params.hyp = "\"" + hypothesisText + "\"";
    params.dialect = "html";
    // worddiffs
    let request_wd: any = {};
    request_wd.jsonrpc = "2.0";
    request_wd.id = "79idqltpu8";
    request_wd.params = params;
    request_wd.method = "metrics.worddiffs";
    logger.debug(request_wd);

    let clientCall = promisifyRpcClientCall(client);

    logger.debug("31.5 Visualise worddiffs results");
    let result: any;
    try {
        result = await clientCall(request_wd);
    } catch (e) {
        logger.warn("An error occurred calling the STT Benchmarking service.", e);
        result = "[STT Benchmarking currently unavailable]";
    }

    logger.debug("31.6 Save worddiffs results to worddiffs.txt file on TempBucket/AIResults");
    logger.debug("Create S3 params for upload");
    const s3Params = {
        Bucket: outputLocation.awsS3Bucket,
        Key: (outputLocation.awsS3KeyPrefix ? outputLocation.awsS3KeyPrefix : "") + "sttbenchmarking/worddiffs.txt",
        Body: JSON.stringify(result)
    };
    logger.debug("S3 params for upload", s3Params);
    await S3.putObject(s3Params).promise();

    logger.debug("31.7 Updating jobAssignment with job output");
    jobAssignmentHelper.jobOutput.set("outputFile", new AwsS3FileLocator({
        awsS3Bucket: s3Params.Bucket,
        awsS3Key: s3Params.Key
    }));
    await jobAssignmentHelper.complete();
}