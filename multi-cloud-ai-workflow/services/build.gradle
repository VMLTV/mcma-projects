task build {
    dependsOn "ame-service:api-handler:build"
    dependsOn "ame-service:worker:build"
    dependsOn "aws-ai-service:api-handler:build"
    dependsOn "aws-ai-service:s3-trigger:build"
    dependsOn "aws-ai-service:sns-trigger:build"
    dependsOn "aws-ai-service:worker:build"
    dependsOn "azure-ai-service:api-handler:build"
    dependsOn "azure-ai-service:api-handler-non-secure:build"
    dependsOn "azure-ai-service:worker:build"
    dependsOn "google-ai-service:api-handler:build"
    dependsOn "google-ai-service:worker:build"
    dependsOn "job-processor-service:api-handler:build"
    dependsOn "job-processor-service:worker:build"
    dependsOn "job-repository:api-handler:build"
    dependsOn "job-repository:worker:build"
    dependsOn "media-repository:api-handler:build"
    dependsOn "service-registry:api-handler:build"
    dependsOn "transform-service:api-handler:build"
    dependsOn "transform-service:worker:build"
    dependsOn "workflow-service:api-handler:build"
    dependsOn "workflow-service:worker:build"
}

subprojects {
    task copyNodeModules(type: Copy) {
        enabled file("package.json").exists()
        dependsOn npmInstall
        from "node_modules"
        into "build/staging/node_modules"
        exclude awsAvailableLibraries
    }

    task copySource(type: Copy) {
        enabled file("package.json").exists()
        enabled !file("tsconfig.json").exists()
        from "src"
        into "build/staging/"
    }

    task tsc(type: Exec) {
        dependsOn npmInstall
        enabled file("tsconfig.json").exists()
        inputs.file "tsconfig.json"
        inputs.files fileTree(dir: "src", include: "**/*.ts").getFiles()
        outputs.files fileTree(dir: "build/staging", include: "**/*.js", exclude: "node_modules").getFiles()
        commandLine tscExecutable
    }

    task build(type: Zip) {
        enabled file("package.json").exists()
        dependsOn copySource, copyNodeModules, tsc
        archiveName "lambda.zip"
        destinationDir file("build/dist")
        from "build/staging"
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}
